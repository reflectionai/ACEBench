"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import env_rpc_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class EnvRpcStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Reset: grpc.UnaryUnaryMultiCallable[
        env_rpc_pb2.ResetRequest,
        env_rpc_pb2.ResetResponse,
    ]

    Step: grpc.UnaryUnaryMultiCallable[
        env_rpc_pb2.StepRequest,
        env_rpc_pb2.StepResponse,
    ]

    Close: grpc.UnaryUnaryMultiCallable[
        env_rpc_pb2.CloseRequest,
        env_rpc_pb2.CloseResponse,
    ]

class EnvRpcAsyncStub:
    Reset: grpc.aio.UnaryUnaryMultiCallable[
        env_rpc_pb2.ResetRequest,
        env_rpc_pb2.ResetResponse,
    ]

    Step: grpc.aio.UnaryUnaryMultiCallable[
        env_rpc_pb2.StepRequest,
        env_rpc_pb2.StepResponse,
    ]

    Close: grpc.aio.UnaryUnaryMultiCallable[
        env_rpc_pb2.CloseRequest,
        env_rpc_pb2.CloseResponse,
    ]

class EnvRpcServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Reset(
        self,
        request: env_rpc_pb2.ResetRequest,
        context: _ServicerContext,
    ) -> typing.Union[env_rpc_pb2.ResetResponse, collections.abc.Awaitable[env_rpc_pb2.ResetResponse]]: ...

    @abc.abstractmethod
    def Step(
        self,
        request: env_rpc_pb2.StepRequest,
        context: _ServicerContext,
    ) -> typing.Union[env_rpc_pb2.StepResponse, collections.abc.Awaitable[env_rpc_pb2.StepResponse]]: ...

    @abc.abstractmethod
    def Close(
        self,
        request: env_rpc_pb2.CloseRequest,
        context: _ServicerContext,
    ) -> typing.Union[env_rpc_pb2.CloseResponse, collections.abc.Awaitable[env_rpc_pb2.CloseResponse]]: ...

def add_EnvRpcServicer_to_server(servicer: EnvRpcServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
